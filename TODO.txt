-combat		
	-player attacks: 
		-light melee
			-collision (done!)
			-animation 
				-anticipation, impact, and recovery
				-cancellable from damage(?) or attack input
				-vfx
		-heavy melee
			-collision
				-apply knockback
			-animation
				-anticipation, impact, and recovery
				-cancellable from damage(?) or attack input
				-vfx
		-light ranged
			-projectiles (done!)
				-collision (it sucks but it kinda works)
			-animation (done!)
				-anticipation, impact, and recovery
				-cancellable from damage(?) or attack input
				-vfx
		-heavy ranged
			-projectiles
				-collision
					-apply knockback
			-animation
				-anticipation, impact, and recovery
				-cancellable from damage(?) or attack input
				-vfx
	-player hurt
		-temp invinc
		-flash animation
		-apply knockback
	-enemy variety
		-ai for anything not zombie-like
		-death animations/vfx/audio
		-a handful of bosses/mini-bosses
		-flying
			-melee
				-harpy?
			-range
				-bomber type?
		-ground
			-melee
				-shroomy
				-other zombie types?
				-something fast
				-something jumpy?
			-range
				-mage?
				-teleporting melee?
-levels
	-Level components which could be glued together. In other words, instead of hand-drawing the tile maps, make component pieces which could be reused, and 
	 potentially teach the player something new, or challenge them in their knowledge.
	-generic level scene such that we are not recreating the same components every time (e.g. player, level behavior scripts, etc)
	-general variety, fleshing out
	-an overworld map would be fantastic; like 5 worlds with 3 levels each
	-moar textures
-audio
	-spatial audio for enemies
		-kinda works, requires a specific AudioStream2D
		-player sfx are way louder
		
-collectibles
	-more textures/animations
	-anything other than gems?
	-health pickups?
-infra
	-save system!!
	-checkpoint system
	-life 
		-collectibles?
	-stats object(s) for player actions
	-credit open art sources, if any sources end up being used
	-player script is getting unwieldy, would be nice to break it up into functional components somehow
	-object communication sucks or is nearly non-existent
	-finalize control scheme
-art
	-undead mage
		-tween to player for more elastic "feel"
	-key door is ugly
	-revisit existing animations to tween where possible
	-main character animations need cleanup, particularly idle
	-
-ui
	-on death, level restart button should be focused
	-design needs improvement, currently generic, without style
	-better font
	-generic function buttons (restart current level, exit, return to menu, etc)
	-dialog? cutscenes? probably not worth it in this scope
	-pause script would be good to integrate with hud or pause menu
	-finish controller support
	-update control scheme popup

-ai
	-undead mage
		-bugging out at the edge of navigation region
		-"incoming" indicator
-bugs
	-when "foot" collider activates, walking animation may stutter
	-on inclines, player may get stuck


-make generic level scene	
	-each level currently has and (mostly) requires the following:
		-SceneRoot (Node2D) as root of level, with a level par time and name
			-expose time and name functions
		-DebugStartPosition (marker)
		-Instance of Player
			-signal HUD for level exit requirements
			-signal HUD for player death
		-TileMap
		-ParallaxBackground (optional)
		-Instance of BackgroundMusic (Node)
		-Instance of HUD
		-Instance of FallZone; 
			-size and position must be adjusted manually
			-signal player body entered
		-Instance of Pause
		-Rubies collection (Node2D) ideally with at least 1 instance of a ruby
			-each instance signal self on body entered
			-each instance signal player on ruby area collected
		-Emerald collection (Node2D) ideally with at least 1 instance of an emerald
		-Instance of sfx (Node)
		-Instance of CabinArea (this needs to change to a generic level end area)
		-Environment Lights (optional)
		-Instance of EndHintArea... should probably attach this to the generic level end area once ready
			-each instance needs to be wired up for player collection
		-Instance of LevelExitRequirements - with values set
		-Enemies collection (Node) ideally with at least 1 instance of an enemy
		
-offstream:
	-light source culling/masking/layers/shadows; how can I show light _behind_ a tileset/map?